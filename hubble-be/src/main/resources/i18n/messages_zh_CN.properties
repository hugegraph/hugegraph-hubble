# External Exceptions
common.param.cannot-be-null-and-empty=参数 {0} 不能为 null 或空
common.param.cannot-be-null=参数 {0} 不能为 null
common.param.cannot-be-empty=参数 {0} 不能为空
common.param.must-be-null=参数 {0} 必须为 null
common.param.should-belong-to=参数 {0} 的取值范围为 {1}
common.name-order.invalid=参数 name_order 要么不设置，要么设置为 asc 或 desc，但实际为 {0}
common.time-order.invalid=参数 time_order 要么不设置，要么设置为 asc 或 desc，但实际为 {0}
common.name-time-order.conflict=参数 name_order 和 time_order 不能同时设置
common.param.path-id-should-same-as-body=路径中的 id({0}) 必须与请求中的 ({0}) 相同当它存在时

client-server.version.unmatched=客户端 hugegraph-client 和服务端 hugegraph-server 的版本不匹配
service.unavailable=服务 {0}:{1} 不可用
service.unknown-host=未知的主机名 {0}

graph-connection.name.unmatch-regex=连接名 {0} 不合法，连接名允许字母、数字、中文、下划线，最多48个字符
graph-connection.graph.unmatch-regex=连接的图名 {0} 不合法，图名应该由字母，数字以及下划线组成，第一个字符必须是字母，最多48个字符
graph-connection.graph.unexist=不存在名字为 {0} 的图在服务 {1}:{2} 上
graph-connection.host.unmatch-regex=连接的主机名 {0} 不合法, 主机名应该由字母，数字以及一些特殊字符组成，比如：_!~*'()-.
graph-connection.port.must-be-in-range=端口号必须属于区间 {0}，但实际为 {1}
graph-connection.username-or-password.incorrect=用户名或密码不正确
graph-connection.exist.name=图 id {0} 已存在
graph-connection.exist.graph-host-port=已存在相同的图名 {0}, 主机名 {1} 和端口号 {2} 的图连接
graph-connection.not-exist.id=不存在 id 为 {0} 的图连接
graph-connection.get.failed=查找 id 为 {0} 的图连接失败

gremlin-collection.name.unmatch-regex=语句名 {0} 不合法，语句名允许字母、数字、中文、下划线，最多48个字符
gremlin-collection.content.invalid=待收藏语句 {0} 不合法
gremlin-collection.reached-limit=已达到收藏语句上限 {0}，请删除一些后再添加
gremlin-collection.exist.name=已存在名字为 {0} 的 gremlin 语句
gremlin-collection.not-exist.name=不存在名字 为 {0} 的 gremlin 语句
gremlin-collection.not-exist.id=不存在 id 为 {0} 的 gremlin 语句

gremlin.illegal-statemnt=非法的 Gremlin 语句，详细信息: {0}
gremlin.statement.exceed-limit=Gremlin 语句太长, 最大长度为 {0}
gremlin.execute.failed=Gremlin 执行失败，详细信息: {0}
gremlin.execute.timeout=Gremlin 执行超时，详细信息: {0}
gremlin.convert-vertex-id.failed=转换顶点 id {0} 失败（按照 id 策略 {1}）

execute-history.not-exist.id=不存在 id 为 {0} 的执行记录

# Schema
schema.propertykey.exist=属性类型名称 {0} 已存在
schema.propertykey.not-exist=不存在名字为 {0} 的属性类型
schema.propertykey.unmatch-regex=属性类型名 {0} 不合法，名字应该由字母，数字、中文、下划线组成，最多128个字符
schema.propertykey.in-using=属性类型 {0} 正在被使用
schema.propertykey.reuse.failed=重用属性类型失败

schema.vertexlabel.exist=已存在名字为 {0} 的顶点类型
schema.vertexlabel.not-exist=不存在名字为 {0} 的顶点类型
schema.vertexlabel.unmatch-regex=顶点类型名 {0} 不合法，名字应该由字母，数字、中文、下划线组成，最多128个字符
schema.vertexlabel.in-using=顶点类型 {0} 正在被使用
schema.vertexlabel.property.cannot-be-null-and-empty=顶点类型 {0} 的属性不能为 null 或空
schema.vertexlabel.primarykey.cannot-be-null-and-empty=顶点类型 {0} 的主键属性不能为 null 或空
schema.vertexlabel.primarykey.must-belong-to.property=顶点类型 {0} 的主键属性 {1} 必须属于普通属性 {2}
schmea.vertexlabel.primarykey.cannot-be-nullable=顶点类型 {0} 的任意主键属性都不允许可空
schema.vertexlabel.primarykey.should-be-null-or-empty=顶点类型 {0} 主键属性必须为 null 或空，因为 id 策略为 {1}
schema.vertexlabel.create.failed=创建顶点类型 {0} 失败
schema.vertexlabel.reuse.failed=重用顶点类型失败
schema.vertexlabel.update.failed=更新顶点类型 {0} 失败
schema.vertexlabel.update.append-index-existed=更新顶点类型 {0} 失败，因为已存在同名的属性索引 {1}
schema.vertexlabel.update.remove-index-unexisted=更新顶点类型 {0} 失败，因为不存在属性索引 {1}

schema.edgelabel.exist=已存在名字为 {0} 的边类型
schema.edgelabel.not-exist=不存在名字为 {0} 的边类型
schema.edgelabel.unmatch-regex=边类型名 {0} 不合法，名字应该由字母，数字、中文、下划线组成，最多128个字符
schema.edgelabel.property.cannot-be-null-and-empty=边类型 {0} 的属性不能为 null 或空
schema.edgelabel.sortkey.cannot-be-null-and-empty=边类型 {0} 的区分键属性不能为 null 或空
schema.edgelabel.sortkey.must-belong-to.property=边类型 {0} 的区分键属性 {1} 必须属于普通属性 {2}
schmea.edgelabel.sortkey.cannot-be-nullable=边类型 {0} 的任意区分键属性都不允许可空
schema.edgelabel.sortkey.should-be-null-or-empty=边类型 {0} 区分键属性必须为 null 或空，因为 id 策略为 {1}
schema.edgelabel.create.failed=创建边类型 {0} 失败
schema.edgelabel.reuse.failed=重用边类型失败
schema.edgelabel.update.failed=更新边类型 {0} 失败
schema.edgelabel.update.append-index-existed=更新边类型 {0} 失败，因为已存在同名的属性索引 {1}
schema.edgelabel.update.remove-index-unexisted=更新边类型 {0} 失败，因为不存在属性索引 {1}

schema.propertyindex.exist.name=已存在名字为 {0} 的属性索引
schema.propertyindex.reuse.failed=重用属性索引失败

schema.conn.cannot-reuse-self=不能重用本图的元数据
schema.cannot-reuse-conflict=不能重用含有冲突的元数据

# Internal Exceptions
common.unknown.enum.type=枚举 {1} 的值 {0} 未知

entity.insert.failed=插入实体 {0} 失败
entity.update.failed=更新实体 {0} 失败
entity.delete.failed=删除实体 {0} 失败

execute.predication.error=执行判断语句出错

reflect.new-instance.failed=通过反射构造类 {0} 的实体失败
reflect.access-field.failed=通过反射访问类 {1} 的域 {0} 失败
